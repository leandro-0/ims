services:
  traefik:
    container_name: traefik-proxy
    image: traefik:v3.1
    restart: always
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.leandroj.tech`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_DASHBOARD_CREDENTIALS}"
    networks:
      - ims-network
    profiles:
      - prod

  ims-backend:
    container_name: ims-backend
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - ./.env
    expose:
      - 8080
    volumes:
      - ./.env:/app/.env
    depends_on:
      - postgres
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.bento.leandroj.tech`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
      # WebSocket support
      - "traefik.http.routers.backend.middlewares=websocket-headers@docker"
      - "traefik.http.middlewares.websocket-headers.headers.customrequestheaders.Connection=Upgrade"
      - "traefik.http.middlewares.websocket-headers.headers.customrequestheaders.Upgrade=websocket"
    profiles:
      - prod
    networks:
      - ims-network

  postgres:
    container_name: ims-database
    image: postgres
    restart: always
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    env_file:
      - ./.env
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    volumes:
      - ~/ims-pgsql:/var/lib/postgresql/data
    networks:
      - ims-network
    profiles:
      - dev
      - prod

  keycloak-dev:
    container_name: keycloak-auth
    image: quay.io/keycloak/keycloak:26.2.5
    environment:
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME:-localhost}
      KC_HOSTNAME_PORT: ${KEYCLOAK_PORT:-7080}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_HEALTH_ENABLED: "true"
      KC_LOG_LEVEL: info
      KEYCLOAK_IMPORT: /opt/keycloak/data/import/realm.json
    ports:
      - "${KEYCLOAK_PORT:-7080}:${KEYCLOAK_PORT:-7080}"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://${KEYCLOAK_HOSTNAME:-localhost}:${KEYCLOAK_PORT:-7080}/health/ready",
        ]
      interval: 15s
      timeout: 2s
      retries: 15
    command:
      ["start-dev", "--http-port", "${KEYCLOAK_PORT:-7080}", "--import-realm"]
    volumes:
      - ${KEYCLOAK_VOLUME_PATH}:/opt/keycloak/data
      - ./keycloak/realm.json:/opt/keycloak/data/import/realm.json
    profiles:
      - dev

  keycloak:
    container_name: keycloak-auth
    image: quay.io/keycloak/keycloak:26.2.5
    environment:
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HTTP_ENABLED: "true"
      KC_PROXY_HEADERS: "xforwarded"
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_HEALTH_ENABLED: "true"
      KC_LOG_LEVEL: info
      KEYCLOAK_IMPORT: /opt/keycloak/data/import/realm.json
    expose:
      - ${KEYCLOAK_PORT:-7080}
    depends_on:
      - traefik
    networks:
      - ims-network
    command:
      [
        "start-dev",
        "--http-port=${KEYCLOAK_PORT:-7080}",
        "--hostname-strict=false",
        "--proxy-headers=xforwarded",
        "--import-realm",
      ]
    volumes:
      - ${KEYCLOAK_VOLUME_PATH}:/opt/keycloak/data
      - ./keycloak/realm.json:/opt/keycloak/data/import/realm.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`auth.bento.leandroj.tech`)"
      - "traefik.http.routers.keycloak.entrypoints=websecure"
      - "traefik.http.routers.keycloak.tls.certresolver=letsencrypt"
      - "traefik.http.services.keycloak.loadbalancer.server.port=7080"
    profiles:
      - prod

  ims-frontend:
    container_name: ims-frontend
    restart: always
    build:
      context: ../frontend
      dockerfile: Dockerfile
    env_file:
      - ./.env
    environment:
      - AUTH_SECRET=${AUTH_SECRET}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
      - KEYCLOAK_ISSUER=${KEYCLOAK_ISSUER}
      - KEYCLOAK_ISSUER_SERVER=${KEYCLOAK_ISSUER_SERVER}
    expose:
      - 3000
    depends_on:
      - ims-backend
      - keycloak
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`bento.leandroj.tech`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    networks:
      - ims-network
    profiles:
      - prod

  postgres-test:
    container_name: ims-database-test
    image: postgres
    restart: always
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    env_file:
      - ./.env
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    networks:
      - ims-network
    profiles:
      - test

  keycloak-test:
    container_name: keycloak-auth-test
    image: quay.io/keycloak/keycloak:26.2.5
    environment:
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME:-localhost}
      KC_HOSTNAME_PORT: ${KEYCLOAK_PORT:-7080}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_HEALTH_ENABLED: "true"
      KC_LOG_LEVEL: info
      KEYCLOAK_IMPORT: /opt/keycloak/data/import/realm.json
    ports:
      - "${KEYCLOAK_PORT:-7080}:${KEYCLOAK_PORT:-7080}"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://${KEYCLOAK_HOSTNAME:-localhost}:${KEYCLOAK_PORT:-7080}/health/ready",
        ]
      interval: 15s
      timeout: 2s
      retries: 15
    command:
      ["start-dev", "--http-port", "${KEYCLOAK_PORT:-7080}", "--import-realm"]
    volumes:
      - ./keycloak/realm.json:/opt/keycloak/data/import/realm.json
    profiles:
      - test
    networks:
      - ims-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - ims-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "${GRAFANA_PORT:-9091}:${GRAFANA_PORT:-9091}"
    restart: unless-stopped
    env_file:
      - ./.env
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/dashboards
      - ./grafana/data:/var/lib/grafana
    environment:
      - GF_SERVER_HTTP_PORT=${GRAFANA_PORT:-9091}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_SECURITY_ADMIN_PASSWORD}
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/spring-boot-statistics.json
    depends_on:
      - prometheus
    networks:
      - ims-network

networks:
  ims-network:
    driver: bridge
